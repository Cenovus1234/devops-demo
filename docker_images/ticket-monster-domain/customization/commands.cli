# Mark the commands below to be run as a batch
batch

# first stop the default servers, block until the server is down
/host=master/server-config=server-one:stop(blocking=true)
/host=master/server-config=server-two:stop(blocking=true)
/host=master/server-config=server-three:stop(blocking=true)

# remove the default server configuration and server-groups
/host=master/server-config=server-one:remove
/host=master/server-config=server-two:remove
/host=master/server-config=server-three:remove
/server-group=other-server-group:remove
/server-group=main-server-group:remove

# Create a server group for ticket monster servers
/server-group=ticketmonster-servers:add(profile=ha, socket-binding-group=ha-sockets, socket-binding-port-offset=100)

# Configure mod_cluster to no use tcp advertisement
/profile=ha/subsystem=modcluster/mod-cluster-config=configuration:write-attribute(name=advertise,value=false)
/profile=ha/subsystem=modcluster/mod-cluster-config=configuration:write-attribute(name=proxy-list,value=modcluster:80)

#Deploy ticket-monster to server-group
deploy /opt/jboss/wildfly/customization/postgresql-9.4-1201.jdbc41.jar --server-groups=ticketmonster-servers
/profile=ha/subsystem=datasources/data-source=TicketMonsterPostgreSQLDS:add(jndi-name=java:jboss/datasources/TicketMonsterPostgreSQLDS, driver-name=postgresql-9.4-1201.jdbc41.jar, connection-url=jdbc:postgresql://db:5432/ticketmonster, user-name=ticketmonster, password=ticketmonster-docker, min-pool-size=1,pool-prefill=true, valid-connection-checker-class-name=org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker, exception-sorter-class-name=org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSortervalidate-on-match=true,background-validation=true)

deploy /opt/jboss/wildfly/customization/ticket-monster.war --server-groups=ticketmonster-servers

#Execute the batch
run-batch